# Copilot Teaching Brief — ECS Deploy (Blue/Green on AWS ECS)

**Purpose:** Equip Copilot Chat to automate safe, zero‑downtime deployments on Amazon ECS using the open‑source `ecs-deploy` shell script from SIL International.

**Primary Source:** https://github.com/sil-org/ecs-deploy

---

## What Copilot Should Know

- `ecs-deploy` is a **shell script** that performs rolling/blue‑green style updates on an ECS **Service** by:
  1) cloning the current **Task Definition**, 2) updating container image(s) and/or params, 3) **registering a new revision**, 4) **updating the Service**, and 5) **waiting** for healthy tasks.
- It relies on **AWS CLI** and **jq**. Ensure both are installed and that AWS credentials are configured (env vars or profile).
- It supports **rollback** to the previous task definition (when `--enable-rollback` is used).
- It’s best suited for teams wanting a **lightweight CLI deployment** without full CodePipeline/CodeDeploy.

---

## Preconditions (Copilot must verify or prompt the user)

- AWS CLI is installed and authenticated:
  ```bash
  aws sts get-caller-identity
  ```
- `jq` is installed:
  ```bash
  jq --version
  ```
- Target resources exist: **ECR image**, **ECS Cluster**, **ECS Service**, **Task execution roles** with `iam:PassRole` as needed.
- The repo has access to image tag(s) (e.g., **Git SHA**).

---

## Install / Update `ecs-deploy`

```bash
sudo curl -L -o /usr/local/bin/ecs-deploy   https://raw.githubusercontent.com/silinternational/ecs-deploy/master/ecs-deploy
sudo chmod +x /usr/local/bin/ecs-deploy

# Confirm
ecs-deploy --help
```

> Alternative: vendor the script into `tools/ecs-deploy` or add as a Git submodule so Copilot can read it locally.

---

## Canonical Deployment Command (template)

```bash
ecs-deploy   -c <ECS_CLUSTER>   -n <ECS_SERVICE>   -i <ECR_REPO>:<IMAGE_TAG>   -t 300   -m 100 -M 200   --enable-rollback
```
**Flags (common):**
- `-c` cluster, `-n` service, `-i` image:tag
- `-t` timeout (seconds), `-m/-M` min/max healthy percent
- `--enable-rollback` roll back to previous task def on failure
- `--desired-count` set a new desired tasks count
- `--region`, `--aws-profile` override region/profile
- `-C <container_name>` limit image update to a specific container if multiple are defined

---

## CI/CD Example — GitHub Actions

```yaml
name: Deploy to ECS
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Install ecs-deploy
        run: |
          sudo curl -L -o /usr/local/bin/ecs-deploy https://raw.githubusercontent.com/silinternational/ecs-deploy/master/ecs-deploy
          sudo chmod +x /usr/local/bin/ecs-deploy

      - name: Deploy service
        env:
          CLUSTER: prod-cluster
          SERVICE: backend-api
          IMAGE: ${{ secrets.ECR_URI }}/backend:${{ github.sha }}
        run: |
          ecs-deploy -c "$CLUSTER" -n "$SERVICE" -i "$IMAGE" --enable-rollback -t 300 -m 100 -M 200
```

> Prefer OIDC over long‑lived access keys. If using keys, set `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, and `AWS_REGION` as repository secrets.

---

## Copilot’s Step‑By‑Step Logic (what to do and in which order)

1. **Validate environment** (AWS auth, jq present, correct region).
2. **Resolve target identifiers** (cluster, service, container name if needed).
3. **Confirm image tag** (prefer Git SHA or semantic version; discourage `latest` in prod).
4. **Dry‑run reasoning**: read current service + task def to detect multi‑container, desiredCount, health checks.
5. **Run `ecs-deploy`** with rollback + sane timeout.
6. **Monitor rollout**: poll `aws ecs describe-services` and surface ECS **events** (helpful for debugging).
7. **On failure**: recommend logs (`aws logs tail`), display failing task reasons (image pull, healthchecks), then **rollback** (auto if flag enabled).
8. **On success**: print new task def revision, active deployments, post‑deploy checks (endpoint probe, ALB target health).

---

## Troubleshooting Prompts (for Copilot to use)

- “Show current deployments and events for `<SERVICE>` on `<CLUSTER>`.”  
  ```bash
  aws ecs describe-services --cluster <CLUSTER> --services <SERVICE>     --query "services[0].{deployments:deployments,events:events[0:10]}"
  ```

- “Why did tasks stop?”  
  ```bash
  aws ecs describe-tasks --cluster <CLUSTER> --tasks $(aws ecs list-tasks --cluster <CLUSTER> --service-name <SERVICE> --desired-status STOPPED --query 'taskArns[0]' -o text)
  ```

- “Tail recent app logs” (if using CloudWatch Logs):  
  ```bash
  aws logs tail /ecs/<SERVICE> --since 15m --follow
  ```

---

## Guardrails / Best Practices

- **Always** include `--enable-rollback` for production.
- Use unique, immutable image tags (e.g., `:<gitsha>`). Avoid `:latest`.
- Ensure enough capacity for rolling updates (desiredCount & maxPercent).
- Keep health checks realistic; long startups require longer timeouts.
- Avoid parallel deployments against the same service.
- Pin AWS region in scripts to avoid surprises.
- Minimum IAM permissions must include: `ecs:Describe*`, `ecs:UpdateService`, `ecs:RegisterTaskDefinition`, `iam:PassRole` (as applicable).

---

## Quick Verification After Deploy

```bash
aws ecs describe-services --cluster <CLUSTER> --services <SERVICE>   --query "services[0].{status:status, runningCount:runningCount, desiredCount:desiredCount, deployments:deployments}"
```

---

## Ready‑Made Copilot Prompts

- “Generate a GitHub Action that deploys `<SERVICE>` on `<CLUSTER>` using ecs‑deploy with rollback and a 5‑minute timeout.”
- “Produce a Bash script `deploy.sh` that tags the Docker image with the current Git SHA, pushes to ECR, then runs `ecs-deploy`.”
- “Inspect the current task definition for `<SERVICE>` and tell me which containers will be updated if I pass `-i <REPO>:<TAG>`.”
- “I’m seeing `CannotPullContainerError`. Print the last 20 ECS events and the CloudWatch Logs for the most recent stopped task.”

---

## Minimal `deploy.sh` Scaffold

```bash
#!/usr/bin/env bash
set -euo pipefail

CLUSTER="${CLUSTER:-prod-cluster}"
SERVICE="${SERVICE:-backend-api}"
REGION="${AWS_REGION:-us-east-1}"
ECR="${ECR_URI:?set ECR_URI, e.g. 123456789012.dkr.ecr.us-east-1.amazonaws.com}"
IMAGE_TAG="${IMAGE_TAG:-$(git rev-parse --short HEAD)}"

IMAGE="${ECR}/backend:${IMAGE_TAG}"

echo "Deploying ${IMAGE} to ${SERVICE} on ${CLUSTER} (${REGION})"

aws ecr get-login-password --region "$REGION" |   docker login --username AWS --password-stdin "${ECR}"

docker build -t "${IMAGE}" .
docker push "${IMAGE}"

ecs-deploy -c "$CLUSTER" -n "$SERVICE" -i "$IMAGE" --enable-rollback -t 300 -m 100 -M 200 --region "$REGION"

aws ecs describe-services --cluster "$CLUSTER" --services "$SERVICE"   --query "services[0].{running:runningCount, desired:desiredCount, deployments:deployments}"
```

---

**End of brief.** Save this file at `.github/copilot/teach-ecs-deploy.md` in your repository so Copilot Chat can reference it locally.
